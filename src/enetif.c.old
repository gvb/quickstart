/**
 * \file enetif.c
 * Ethernet Interface
 */

/*
 * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This file is part of the lwIP TCP/IP stack.
 *
 * Author: Adam Dunkels <adam@sics.se>
 *
 */

/** \todo remove this
 * This file is a skeleton for developing Ethernet network interface
 * drivers for lwIP. Add code to the low_level functions and do a
 * search-and-replace for the word "ethernetif" to replace it with
 * something that better describes your network interface.
 */

#include "lwip/opt.h"

#include "lwip/def.h"
#include "lwip/mem.h"
#include "lwip/pbuf.h"
#include "lwip/sys.h"
#include <lwip/stats.h>
#include <lwip/snmp.h>
#include "netif/etharp.h"
#include "netif/ppp_oe.h"

/* Define those to better describe your network interface. */
#define IFNAME0 'e'
#define IFNAME1 'n'

#ifndef ETHERMTU
#define ETHERMTU 1500
#endif

/**
 * Helper struct to hold private data used to operate the ethernet
 * interface.
 */
struct enetif {
  /* Add whatever per-interface state that is needed here. */
};

/* Forward declarations. */
static void  enetif_input(struct netif *netif);

/**
 * Initialize the hardware.
 * Called from enetif_init().
 *
 * \param netif The network interface structure, already initialized by
 *        lwip for this interface.
 */
static void low_level_hw_init(struct netif *netif)
{
	struct enetif *enetif = netif->state;
	int j;

	/* Set the MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* Set the MAC hardware address */
	for(j = 0; j < ETHARP_HWADDR_LEN; j++)
		netif->hwaddr[j] = permcfg.mac[j];

	/* maximum transfer unit */
	netif->mtu = 1500;

	/* device capabilities */
	netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP |
			NETIF_FLAG_LINK_UP;

	/******* Initialize the hardware. ********/

	/* Ensure all interrupts are disabled. */
	EthernetIntDisable(ETH_BASE, ETH_INT_PHY | ETH_INT_MDIO |
		ETH_INT_RX | ETH_INT_RXER | ETH_INT_RXOF |
		ETH_INT_TX | ETH_INT_TXER);

	/* Clear any interrupts that were already pending. */
	ulTemp = EthernetIntStatus( ETH_BASE, pdFALSE );
	EthernetIntClear( ETH_BASE, ulTemp );

	/* Initialise the MAC and connect. */
	EthernetInitExpClk(ETH_BASE, SysCtlClockGet());

	EthernetConfigSet(ETH_BASE,
		ETH_CFG_TX_DPLXEN | ETH_CFG_TX_CRCEN | ETH_CFG_TX_PADEN);
	EthernetEnable(ETH_BASE);

	/* Mark each Rx buffer as empty. */
	for(j = 0; j < emacNUM_RX_BUFFERS; j++)
	{
		ulRxLength[j] = 0;
	}
	
	/*
	 * Create the queue and task used to defer the MAC processing
	 * to the task level.
	 */
	vSemaphoreCreateBinary(xMACInterruptSemaphore);
	xSemaphoreTake(xMACInterruptSemaphore, 0);
	xReturn = xTaskCreate(vMACHandleTask, (signed portCHAR *)
		"MAC", WEB_STACK_SIZE, NULL, WEB_TASK_PRIORITY, NULL);
	vTaskDelay(macNEGOTIATE_DELAY);
	
	/* We are only interested in Rx interrupts. */
	IntPrioritySet(INT_ETH, configKERNEL_INTERRUPT_PRIORITY);
	IntEnable(INT_ETH);
	EthernetIntEnable(ETH_BASE, ETH_INT_RX);
}

/**
 * Transmit a packet. The packet is contained in the pbuf that is passed
 * to the function. This pbuf might be chained.
 *
 * \param netif The lwip network interface structure for this interface.
 * \param p The MAC packet to send (IP packet including MAC addresses and type)
 * \return ERR_OK if the packet could be sent
 *         An err_t value if the packet couldn't be sent
 *
 * \note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
	struct enetif *enetif = netif->state;
	struct pbuf *q;

	initiate transfer();

#if ETH_PAD_SIZE
	pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
#endif

	/*
	 * Add in the size of the data, used by the ethernet peripheral.
	 * It slots into the first two bytes of the packet buffer, so
	 * "ETH_PAD_SIZE" is really not padding, it is hardware overhead.
	 */
	(uint16_t *)q->payload = (uint16_t)q->len - 2;

	for(q = p; q != NULL; q = q->next) {
		while(!EthernetSpaceAvail(ETH_BASE))
			vTaskDelay(MAC_WAIT_SEND_TIME);
		EthernetPacketPutNonBlocking(ETH_BASE, q->payload, q->len);
	}

#if ETH_PAD_SIZE
	pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
#endif

	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}

/**
 * Allocate a pbuf and transfer the bytes of the incoming packet from
 * the interface into the pbuf.
 *
 * \param netif The lwip network interface structure for this interface.
 * \return A pbuf filled with the received packet (including MAC header).
 *         NULL on memory error.
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
	struct enetif *enetif = netif->state;
	struct pbuf *p, *q;
	u16_t len;
	int offset = 0;

	/*
	 * The way the ethernet interface library is set up, we need to
	 * receive into a buffer and then copy the data into pbufs.
	 * If we did it all ourselves, we could be more efficient...
	 */
	static uint8_t rxbuf[ETHERMTU];

	if (!EthernetPacketAvail(ETH_BASE))
		return NULL;

	/* Obtain the size of the packet and put it into the "len"
		 variable. */
	len = EthernetPacketGetNonBlocking(ETH_BASE, rxbuf, ETHERMTU);

#if ETH_PAD_SIZE
	len += ETH_PAD_SIZE; /* allow room for Ethernet padding */
#endif

	/* We allocate a pbuf chain of pbufs from the pool. */
	p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);

	if (p != NULL) {

#if ETH_PAD_SIZE
		pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
#endif
		/* Copy the data into the pbuf chain. */
		for(q = p; q != NULL; q = q->next) {
			memcpy(q->payload, &rxbuf[offset],
				len > q->len ? q->len : len);
			offset += len > q->len ? q->len : len;
		}

#if ETH_PAD_SIZE
		pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
#endif

		LINK_STATS_INC(link.recv);
	} else {
		drop packet();
		LINK_STATS_INC(link.memerr);
		LINK_STATS_INC(link.drop);
	}

	return p;
}

/**
 * This function is called when a packet is ready to be read from the
 * interface. It uses the function low_level_input() that handles the
 * actual reception of bytes from the network interface. Then the type of
 * the received packet is determined and the appropriate input function
 * is called.
 *
 * \param netif The lwip network interface structure for this interface.
 */
static void
enetif_input(struct netif *netif)
{
	struct enetif *enetif;
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	enetif = netif->state;

	/* Read the received packet into a new pbuf chain. */
	p = low_level_input(netif);

	/* No packet could be read, silently ignore this. */
	if (p == NULL)
		return;

	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
	/* IP or ARP packet? */
	case ETHTYPE_IP:
	case ETHTYPE_ARP:
#if PPPOE_SUPPORT
	/* PPPoE packet? */
	case ETHTYPE_PPPOEDISC:
	case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
		/* full packet send to tcpip_thread to process */
		if (netif->input(p, netif)!=ERR_OK)
		 { LWIP_DEBUGF(NETIF_DEBUG, ("enetif_input: IP input error\n"));
			 pbuf_free(p);
			 p = NULL;
		 }
		break;

	default:
		pbuf_free(p);
		p = NULL;
		break;
	}
}

/**
 * Must be called at the beginning of the program to set up the
 * network interface. It calls the function low_level_init() to do the
 * actual setup of the hardware.
 *
 * This function is passed as a parameter to netif_add().
 *
 * \param netif The lwip network interface structure for this interface.
 * \return ERR_OK if the loopif is initialized.
 *         ERR_MEM if private data couldn't be allocated.
 *         Any other err_t on error.
 */
err_t enetif_init(struct netif *netif)
{
	struct enetif *enetif;

	LWIP_ASSERT("netif != NULL", (netif != NULL));

	enetif = mem_malloc(sizeof(struct enetif));
	if (enetif == NULL) {
		LWIP_DEBUGF(NETIF_DEBUG, ("enetif_init: out of memory\n"));
		return ERR_MEM;
	}

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "cri-qstart";
#endif /* LWIP_NETIF_HOSTNAME */

	/*
	 * Initialize the snmp variables and counters inside the struct
	 * netif.  The last argument should be replaced with your link
	 * speed, in units of bits per second.
	 */
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

	netif->state = enetif;
	netif->name[0] = IFNAME0;
	netif->name[1] = IFNAME1;
	/**
	 * \todo We directly use etharp_output() here to save a function
	 * call.  You can instead declare your own function an call
	 * etharp_output() from it if you have to do some checks before
	 * sending (e.g. if link is available...)
	 */
	netif->output = etharp_output;
	netif->linkoutput = low_level_output;

	enetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);

	/* initialize the hardware */
	low_level_init(netif);

	return ERR_OK;
}
